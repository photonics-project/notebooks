"use strict";(self.webpackChunk_jupyterlite_xeus_extension=self.webpackChunk_jupyterlite_xeus_extension||[]).push([[961],{342:(e,t,n)=>{n.r(t),n.d(t,{IEmpackEnvMetaFile:()=>i,default:()=>k});var s=n(367),r=n(446),a=n(985),o=n(588),c=n(162);const i=new(n(262).Token)("@jupyterlite/xeus:IEmpackEnvMetaFile");async function l(e){const t=s.URLExt.join(s.PageConfig.getBaseUrl(),e),n=await fetch(t,{method:"GET"});if(!n.ok)throw new Error(`HTTP error! status: ${n.status}`);return await n.json()}const u={id:"@jupyterlite/xeus-kernel:register",autoStart:!0,requires:[o.IKernelSpecs],optional:[r.IServiceWorkerManager,a.IBroadcastChannelWrapper,i],activate:async(e,t,n,r,a)=>{let o=[];try{o=await l("xeus/kernels.json")}catch(e){throw console.log(`Could not fetch xeus/kernels.json: ${e}`),e}const i=e.serviceManager.contents;for(const e of o){const o=await l("xeus/kernels/"+e+"/kernel.json");o.name=e,o.dir=e;for(const[e,t]of Object.entries(o.resources))o.resources[e]=s.URLExt.join(s.PageConfig.getBaseUrl(),t);t.register({spec:o,create:async e=>{const t=!!((null==n?void 0:n.enabled)&&(null==r?void 0:r.enabled)||crossOriginIsolated);t?console.info(`${o.name} contents will be synced with Jupyter Contents`):console.warn(`${o.name} contents will NOT be synced with Jupyter Contents`);const s=a?await a.getLink(o):"";return new c.WebWorkerKernel({...e,contentsManager:i,mountDrive:t,kernelSpec:o,empackEnvMetaLink:s})}})}await e.serviceManager.kernelspecs.refreshSpecs()}},k=[{id:"@jupyterlite/xeus:empack-env-meta",autoStart:!0,provides:i,activate:()=>({getLink:async e=>{const t=e.name;return`${s.URLExt.join(s.PageConfig.getBaseUrl(),`xeus/kernels/${t}`)}`}})},u]}}]);